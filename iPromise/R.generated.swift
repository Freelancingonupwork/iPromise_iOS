//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()

  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `backgroundColor`.
    var backgroundColor: RswiftResources.ColorResource { .init(name: "backgroundColor", path: [], bundle: bundle) }

    /// Color `blackColor`.
    var blackColor: RswiftResources.ColorResource { .init(name: "blackColor", path: [], bundle: bundle) }

    /// Color `grayColor`.
    var grayColor: RswiftResources.ColorResource { .init(name: "grayColor", path: [], bundle: bundle) }

    /// Color `greenColor`.
    var greenColor: RswiftResources.ColorResource { .init(name: "greenColor", path: [], bundle: bundle) }

    /// Color `primaryColor`.
    var primaryColor: RswiftResources.ColorResource { .init(name: "primaryColor", path: [], bundle: bundle) }

    /// Color `primaryLight`.
    var primaryLight: RswiftResources.ColorResource { .init(name: "primaryLight", path: [], bundle: bundle) }

    /// Color `redColor`.
    var redColor: RswiftResources.ColorResource { .init(name: "redColor", path: [], bundle: bundle) }

    /// Color `whiteColor`.
    var whiteColor: RswiftResources.ColorResource { .init(name: "whiteColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 48 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Home Indicator`.
    var homeIndicator: RswiftResources.ImageResource { .init(name: "Home Indicator", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `account`.
    var account: RswiftResources.ImageResource { .init(name: "account", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `background`.
    var background: RswiftResources.ImageResource { .init(name: "background", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `banner`.
    var banner: RswiftResources.ImageResource { .init(name: "banner", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bell`.
    var bell: RswiftResources.ImageResource { .init(name: "bell", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bottom-arrow`.
    var bottomArrow: RswiftResources.ImageResource { .init(name: "bottom-arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calendar-gray`.
    var calendarGray: RswiftResources.ImageResource { .init(name: "calendar-gray", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calender`.
    var calender: RswiftResources.ImageResource { .init(name: "calender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `camera`.
    var camera: RswiftResources.ImageResource { .init(name: "camera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `complete-action1`.
    var completeAction1: RswiftResources.ImageResource { .init(name: "complete-action1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `complete-promise-overlay`.
    var completePromiseOverlay: RswiftResources.ImageResource { .init(name: "complete-promise-overlay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `default-user`.
    var defaultUser: RswiftResources.ImageResource { .init(name: "default-user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `edit`.
    var edit: RswiftResources.ImageResource { .init(name: "edit", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `empty-notification`.
    var emptyNotification: RswiftResources.ImageResource { .init(name: "empty-notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fail-action`.
    var failAction: RswiftResources.ImageResource { .init(name: "fail-action", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fail-promise-overlay`.
    var failPromiseOverlay: RswiftResources.ImageResource { .init(name: "fail-promise-overlay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fail-promise-overlay1`.
    var failPromiseOverlay1: RswiftResources.ImageResource { .init(name: "fail-promise-overlay1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gradient-background`.
    var gradientBackground: RswiftResources.ImageResource { .init(name: "gradient-background", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `home-notification`.
    var homeNotification: RswiftResources.ImageResource { .init(name: "home-notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `home-profile`.
    var homeProfile: RswiftResources.ImageResource { .init(name: "home-profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `imagePlaceholder`.
    var imagePlaceholder: RswiftResources.ImageResource { .init(name: "imagePlaceholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `info`.
    var info: RswiftResources.ImageResource { .init(name: "info", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `invite`.
    var invite: RswiftResources.ImageResource { .init(name: "invite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `invite-friend`.
    var inviteFriend: RswiftResources.ImageResource { .init(name: "invite-friend", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `left-arrow`.
    var leftArrow: RswiftResources.ImageResource { .init(name: "left-arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `line`.
    var line: RswiftResources.ImageResource { .init(name: "line", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `login-img`.
    var loginImg: RswiftResources.ImageResource { .init(name: "login-img", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logout`.
    var logout: RswiftResources.ImageResource { .init(name: "logout", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `make-promise`.
    var makePromise: RswiftResources.ImageResource { .init(name: "make-promise", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu-white`.
    var menuWhite: RswiftResources.ImageResource { .init(name: "menu-white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no-contact`.
    var noContact: RswiftResources.ImageResource { .init(name: "no-contact", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no-promise`.
    var noPromise: RswiftResources.ImageResource { .init(name: "no-promise", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `notification`.
    var notification: RswiftResources.ImageResource { .init(name: "notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `notification-badge`.
    var notificationBadge: RswiftResources.ImageResource { .init(name: "notification-badge", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `notification-white`.
    var notificationWhite: RswiftResources.ImageResource { .init(name: "notification-white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `notification-with-badge-home`.
    var notificationWithBadgeHome: RswiftResources.ImageResource { .init(name: "notification-with-badge-home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `notification-with-badge-profile`.
    var notificationWithBadgeProfile: RswiftResources.ImageResource { .init(name: "notification-with-badge-profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `privacy-policy`.
    var privacyPolicy: RswiftResources.ImageResource { .init(name: "privacy-policy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `quick-promise`.
    var quickPromise: RswiftResources.ImageResource { .init(name: "quick-promise", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `reminder`.
    var reminder: RswiftResources.ImageResource { .init(name: "reminder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `search`.
    var search: RswiftResources.ImageResource { .init(name: "search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting`.
    var setting: RswiftResources.ImageResource { .init(name: "setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `share`.
    var share: RswiftResources.ImageResource { .init(name: "share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sorting`.
    var sorting: RswiftResources.ImageResource { .init(name: "sorting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splash`.
    var splash: RswiftResources.ImageResource { .init(name: "splash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splash-gif.gif`.
    var splashGifGif: RswiftResources.ImageResource { .init(name: "splash-gif.gif", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `t&c`.
    var tC: RswiftResources.ImageResource { .init(name: "t&c", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `up-arrow`.
    var upArrow: RswiftResources.ImageResource { .init(name: "up-arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    let apsEnvironment: String = "development"
    let comAppleDeveloperAssociatedDomains = comAppleDeveloperAssociatedDomains()
    struct comAppleDeveloperAssociatedDomains {
      let applinksIpromisePageLink: String = "applinks:ipromise.page.link"
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Mulish-ExtraBold`.
    var mulishExtraBold: RswiftResources.FontResource { .init(name: "Mulish-ExtraBold", bundle: bundle, filename: "Mulish-Bold.ttf") }

    /// Font `Mulish-Regular`.
    var mulishRegular: RswiftResources.FontResource { .init(name: "Mulish-Regular", bundle: bundle, filename: "Mulish-Regular.ttf") }

    /// Font `Mulish-SemiBold`.
    var mulishSemiBold: RswiftResources.FontResource { .init(name: "Mulish-SemiBold", bundle: bundle, filename: "Mulish-Medium.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [mulishExtraBold, mulishRegular, mulishSemiBold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 8 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Mulish-Bold.ttf`.
    var mulishBoldTtf: RswiftResources.FileResource { .init(name: "Mulish-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Mulish-Medium.ttf`.
    var mulishMediumTtf: RswiftResources.FileResource { .init(name: "Mulish-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Mulish-Regular.ttf`.
    var mulishRegularTtf: RswiftResources.FileResource { .init(name: "Mulish-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `complete-promise-json.json`.
    var completePromiseJsonJson: RswiftResources.FileResource { .init(name: "complete-promise-json", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `loader.json`.
    var loaderJson: RswiftResources.FileResource { .init(name: "loader", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `splash-gif.gif`.
    var splashGifGif: RswiftResources.FileResource { .init(name: "splash-gif", pathExtension: "gif", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `splash.mp4`.
    var splashMp4: RswiftResources.FileResource { .init(name: "splash", pathExtension: "mp4", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 35 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `AccountAndInfoCell`.
    var accountAndInfoCell: RswiftResources.NibReference<AccountAndInfoCell> { .init(name: "AccountAndInfoCell", bundle: bundle) }

    /// Nib `AddMemberCell`.
    var addMemberCell: RswiftResources.NibReference<AddMemberCell> { .init(name: "AddMemberCell", bundle: bundle) }

    /// Nib `AddMemberVC`.
    var addMemberVC: RswiftResources.NibReference<AddMemberView> { .init(name: "AddMemberVC", bundle: bundle) }

    /// Nib `CompletePopupVC`.
    var completePopupVC: RswiftResources.NibReference<CompletePopupView> { .init(name: "CompletePopupVC", bundle: bundle) }

    /// Nib `EditAccountVC`.
    var editAccountVC: RswiftResources.NibReference<EditAccountView> { .init(name: "EditAccountVC", bundle: bundle) }

    /// Nib `FilterCell`.
    var filterCell: RswiftResources.NibReference<FilterCell> { .init(name: "FilterCell", bundle: bundle) }

    /// Nib `FilterVC`.
    var filterVC: RswiftResources.NibReference<FilterView> { .init(name: "FilterVC", bundle: bundle) }

    /// Nib `HomeVC`.
    var homeVC: RswiftResources.NibReference<HomeView> { .init(name: "HomeVC", bundle: bundle) }

    /// Nib `InviteCell`.
    var inviteCell: RswiftResources.NibReference<InviteCell> { .init(name: "InviteCell", bundle: bundle) }

    /// Nib `InviteViaContactVC`.
    var inviteViaContactVC: RswiftResources.NibReference<InviteViaContactView> { .init(name: "InviteViaContactVC", bundle: bundle) }

    /// Nib `LoaderVC`.
    var loaderVC: RswiftResources.NibReference<UIKit.UIView> { .init(name: "LoaderVC", bundle: bundle) }

    /// Nib `NameVC`.
    var nameVC: RswiftResources.NibReference<NameView> { .init(name: "NameVC", bundle: bundle) }

    /// Nib `NotificationStatusCell`.
    var notificationStatusCell: RswiftResources.NibReference<NotificationStatusCell> { .init(name: "NotificationStatusCell", bundle: bundle) }

    /// Nib `NotificationsCell`.
    var notificationsCell: RswiftResources.NibReference<NotificationsCell> { .init(name: "NotificationsCell", bundle: bundle) }

    /// Nib `NotificationsVC`.
    var notificationsVC: RswiftResources.NibReference<NotificationsView> { .init(name: "NotificationsVC", bundle: bundle) }

    /// Nib `OtpVC`.
    var otpVC: RswiftResources.NibReference<OtpView> { .init(name: "OtpVC", bundle: bundle) }

    /// Nib `PhoneVC`.
    var phoneVC: RswiftResources.NibReference<PhoneView> { .init(name: "PhoneVC", bundle: bundle) }

    /// Nib `ProfileMenuCell`.
    var profileMenuCell: RswiftResources.NibReference<ProfileMenuCell> { .init(name: "ProfileMenuCell", bundle: bundle) }

    /// Nib `ProfileMenuVC`.
    var profileMenuVC: RswiftResources.NibReference<ProfileMenuView> { .init(name: "ProfileMenuVC", bundle: bundle) }

    /// Nib `ProfileVC`.
    var profileVC: RswiftResources.NibReference<ProfileView> { .init(name: "ProfileVC", bundle: bundle) }

    /// Nib `PromiseCategoryCell`.
    var promiseCategoryCell: RswiftResources.NibReference<PromiseCategoryCell> { .init(name: "PromiseCategoryCell", bundle: bundle) }

    /// Nib `PromiseCategoryVC`.
    var promiseCategoryVC: RswiftResources.NibReference<PromiseCategoryView> { .init(name: "PromiseCategoryVC", bundle: bundle) }

    /// Nib `PromiseCell`.
    var promiseCell: RswiftResources.NibReference<PromiseCell> { .init(name: "PromiseCell", bundle: bundle) }

    /// Nib `PromiseCollectionCell`.
    var promiseCollectionCell: RswiftResources.NibReference<PromiseCollectionCell> { .init(name: "PromiseCollectionCell", bundle: bundle) }

    /// Nib `PromiseDetailVC`.
    var promiseDetailVC: RswiftResources.NibReference<PromiseDetailView> { .init(name: "PromiseDetailVC", bundle: bundle) }

    /// Nib `PromisePopupCell`.
    var promisePopupCell: RswiftResources.NibReference<PromisePopupCell> { .init(name: "PromisePopupCell", bundle: bundle) }

    /// Nib `PromisePopupVC`.
    var promisePopupVC: RswiftResources.NibReference<PromisePopupView> { .init(name: "PromisePopupVC", bundle: bundle) }

    /// Nib `PromiseSetupVC`.
    var promiseSetupVC: RswiftResources.NibReference<PromiseSetupView> { .init(name: "PromiseSetupVC", bundle: bundle) }

    /// Nib `PromiseSubCategoryCell`.
    var promiseSubCategoryCell: RswiftResources.NibReference<PromiseSubCategoryCell> { .init(name: "PromiseSubCategoryCell", bundle: bundle) }

    /// Nib `PromiseSubCategoryVC`.
    var promiseSubCategoryVC: RswiftResources.NibReference<PromiseSubCategoryView> { .init(name: "PromiseSubCategoryVC", bundle: bundle) }

    /// Nib `SettingVC`.
    var settingVC: RswiftResources.NibReference<SettingView> { .init(name: "SettingVC", bundle: bundle) }

    /// Nib `SignInUpVC`.
    var signInUpVC: RswiftResources.NibReference<SignInUpView> { .init(name: "SignInUpVC", bundle: bundle) }

    /// Nib `SplashVC`.
    var splashVC: RswiftResources.NibReference<SplashView> { .init(name: "SplashVC", bundle: bundle) }

    /// Nib `TrackDailyPromiseVC`.
    var trackDailyPromiseVC: RswiftResources.NibReference<TrackDailyPromiseView> { .init(name: "TrackDailyPromiseVC", bundle: bundle) }

    /// Nib `WebviewVC`.
    var webviewVC: RswiftResources.NibReference<WebviewView> { .init(name: "WebviewVC", bundle: bundle) }

    func validate() throws {
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in nib 'AccountAndInfoCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "notification", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'notification' is used in nib 'AccountAndInfoCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'AccountAndInfoCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'AccountAndInfoCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'AccountAndInfoCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.square.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.square.fill' is used in nib 'AddMemberCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "imagePlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagePlaceholder' is used in nib 'AddMemberCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "phone.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'phone.circle.fill' is used in nib 'AddMemberCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'square' is used in nib 'AddMemberCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'AddMemberCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'AddMemberCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'AddMemberCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "greenColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'greenColor' is used in nib 'AddMemberCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "banner", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'banner' is used in nib 'AddMemberVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gradient-background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gradient-background' is used in nib 'AddMemberVC', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply.circle.fill' is used in nib 'AddMemberVC', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'search' is used in nib 'AddMemberVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'AddMemberVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'AddMemberVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'AddMemberVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'AddMemberVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'AddMemberVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'CompletePopupVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'CompletePopupVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'CompletePopupVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "camera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'camera' is used in nib 'EditAccountVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "default-user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'default-user' is used in nib 'EditAccountVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'EditAccountVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "redColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'redColor' is used in nib 'EditAccountVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'EditAccountVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'FilterCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.down' is used in nib 'FilterVC', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'FilterVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'FilterVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'FilterVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'FilterVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'FilterVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "banner", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'banner' is used in nib 'HomeVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gradient-background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gradient-background' is used in nib 'HomeVC', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply.circle.fill' is used in nib 'HomeVC', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "no-promise", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no-promise' is used in nib 'HomeVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "notification-badge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'notification-badge' is used in nib 'HomeVC', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in nib 'HomeVC', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "search", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'search' is used in nib 'HomeVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "sorting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sorting' is used in nib 'HomeVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'HomeVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'HomeVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'HomeVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'HomeVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'HomeVC', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.square.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.square.fill' is used in nib 'InviteCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'InviteCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'square' is used in nib 'InviteCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'InviteCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'InviteCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'InviteCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "no-contact", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no-contact' is used in nib 'InviteViaContactVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'InviteViaContactVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'InviteViaContactVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'InviteViaContactVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'InviteViaContactVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'NameVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'NameVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'NameVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'NameVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'NameVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'NotificationStatusCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'NotificationStatusCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "default-user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'default-user' is used in nib 'NotificationsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'NotificationsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'NotificationsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'NotificationsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "greenColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'greenColor' is used in nib 'NotificationsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "redColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'redColor' is used in nib 'NotificationsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'NotificationsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "empty-notification", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'empty-notification' is used in nib 'NotificationsVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'NotificationsVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'NotificationsVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'NotificationsVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'OtpVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'OtpVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'OtpVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "redColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'redColor' is used in nib 'OtpVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'OtpVC', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'PhoneVC', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'PhoneVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'PhoneVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'PhoneVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryLight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryLight' is used in nib 'PhoneVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'PhoneVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'ProfileMenuCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'ProfileMenuCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'ProfileMenuCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'ProfileMenuVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryLight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryLight' is used in nib 'ProfileMenuVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'ProfileMenuVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "default-user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'default-user' is used in nib 'ProfileVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gradient-background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gradient-background' is used in nib 'ProfileVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "no-promise", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no-promise' is used in nib 'ProfileVC', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in nib 'ProfileVC', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "sorting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sorting' is used in nib 'ProfileVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'ProfileVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'ProfileVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'ProfileVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'ProfileVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imagePlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagePlaceholder' is used in nib 'PromiseCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'PromiseCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'PromiseCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'PromiseCategoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gradient-background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gradient-background' is used in nib 'PromiseCategoryVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'PromiseCategoryVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryLight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryLight' is used in nib 'PromiseCategoryVC', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark.circle' is used in nib 'PromiseCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "default-user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'default-user' is used in nib 'PromiseCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gradient-background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gradient-background' is used in nib 'PromiseCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imagePlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagePlaceholder' is used in nib 'PromiseCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'PromiseCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'PromiseCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "greenColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'greenColor' is used in nib 'PromiseCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'PromiseCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "default-user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'default-user' is used in nib 'PromiseCollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gradient-background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gradient-background' is used in nib 'PromiseCollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imagePlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagePlaceholder' is used in nib 'PromiseCollectionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'PromiseCollectionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'PromiseCollectionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'PromiseCollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "calendar-gray", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'calendar-gray' is used in nib 'PromiseDetailVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gradient-background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gradient-background' is used in nib 'PromiseDetailVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imagePlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagePlaceholder' is used in nib 'PromiseDetailVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'PromiseDetailVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'PromiseDetailVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'PromiseDetailVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "redColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'redColor' is used in nib 'PromiseDetailVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'PromiseDetailVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "quick-promise", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'quick-promise' is used in nib 'PromisePopupCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'PromisePopupCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'PromisePopupCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'PromisePopupCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'PromisePopupVC', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'PromisePopupVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'PromisePopupVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'PromisePopupVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "calender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'calender' is used in nib 'PromiseSetupVC', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.left' is used in nib 'PromiseSetupVC', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in nib 'PromiseSetupVC', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "gradient-background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gradient-background' is used in nib 'PromiseSetupVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "invite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'invite' is used in nib 'PromiseSetupVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "invite-friend", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'invite-friend' is used in nib 'PromiseSetupVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'PromiseSetupVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'PromiseSetupVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grayColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grayColor' is used in nib 'PromiseSetupVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'PromiseSetupVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryLight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryLight' is used in nib 'PromiseSetupVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'PromiseSetupVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imagePlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagePlaceholder' is used in nib 'PromiseSubCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'PromiseSubCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blackColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blackColor' is used in nib 'PromiseSubCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'PromiseSubCategoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gradient-background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gradient-background' is used in nib 'PromiseSubCategoryVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'PromiseSubCategoryVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryLight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryLight' is used in nib 'PromiseSubCategoryVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'SettingVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'background' is used in nib 'SignInUpVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "login-img", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'login-img' is used in nib 'SignInUpVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'SignInUpVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryColor' is used in nib 'SignInUpVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'SignInUpVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "splash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splash' is used in nib 'SplashVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'SplashVC', but couldn't be loaded.") }
      if UIKit.UIImage(named: "background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'background' is used in nib 'TrackDailyPromiseVC', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.left' is used in nib 'TrackDailyPromiseVC', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.right' is used in nib 'TrackDailyPromiseVC', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'multiply' is used in nib 'TrackDailyPromiseVC', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'TrackDailyPromiseVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "whiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'whiteColor' is used in nib 'TrackDailyPromiseVC', but couldn't be loaded.") }
      if UIKit.UIColor(named: "backgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'backgroundColor' is used in nib 'WebviewVC', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "splash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ViewController

      let bundle: Foundation.Bundle

      let name = "Main"
      func validate() throws {

      }
    }
  }
}